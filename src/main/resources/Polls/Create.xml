<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>Polls</web>
  <name>Create</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Polls.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1270892056000</creationDate>
  <date>1271587132000</date>
  <contentUpdateDate>1271587132000</contentUpdateDate>
  <version>1.1</version>
  <title>$msg.get("polls.create.title")</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Polls.Macros"/}}

{{velocity output="false"}}
$xwiki.jsfx.use('js/xwiki/editors/fullScreenEdit.js', {'forceSkinAction': true, 'language': ${context.language}})
$xwiki.ssfx.use('js/xwiki/editors/fullScreenEdit.css', true)

#if("$!{request.xcreate}" == 'poll')
## =======================================================
## Processing the creation form
##
#set($space = "$!{request.getParameter('space')}")
#if("$!{space}" == '')
  #set($space = $pollsSpace)
#end
##
#set($title = "$!{request.getParameter('title')}")
##
#set($options = "$!{request.getParameter('options')}")
#set($options = $options.split('\n'))
#set($cleanedOptions = [])
#foreach($option in $options)
  #if("${option.trim}" != '')
    #set($discard = $cleanedOptions.add($option.trim()))
  #end
#end
#set($options = $cleanedOptions)
## Date format validation
#set($fieldNamePrefix = $pollClass.concat('_0_'))
#set($pattern = $regextool.compile('^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)[0-9]{2}) ([01][0-9]|2[0-3]):([0-5][0-9])$'))
#set($fieldToMessage = {'from' : 'polls.form.error.missingOpenDate', 'to' : 'polls.form.error.missingCloseDate'})
#foreach($field in $fieldToMessage.keySet())
  #set($value = "$!{request.getParameter($fieldNamePrefix.concat($field))}")
  #set($matcher = $pattern.matcher($value))
  #if($matcher.matches())
    #set($day = $mathtool.toInteger($matcher.group(1)))
    #set($month = $mathtool.toInteger($matcher.group(2)))
    #set($year = $mathtool.toInteger($matcher.group(3)))
    #if (($day == 31 &amp;&amp; ($month == 4 or $month == 6 or $month == 9 or $month == 11)) ||
         ($day &gt;= 30 &amp;&amp; $month == 2) ||
         ($month == 2 &amp;&amp; $day == 29 &amp;&amp; !($year % 4 == 0 &amp;&amp; ($year % 100 != 0 || $year % 400 == 0))))
      #set($errorMessage = $msg.get($fieldToMessage.get($field), [${pollDateFormat}]))
      #break
    #end
  #else
    #set($errorMessage = $msg.get($fieldToMessage.get($field), [${pollDateFormat}]))
    #break
  #end
#end
#if($title == '')
  #set($errorMessage = $msg.get('polls.form.error.missingTitle'))
#elseif($options.size() &lt; 2)
  #set($errorMessage = $msg.get('polls.form.error.missingOptions'))
#elseif("$!{errorMessage}" == '')
  #set($pollName = $title.replaceAll('[:.#@^?]', '').trim())
  #set($pollDoc = $xwiki.getDocument("${space}.${xwiki.getUniquePageName($space, $pollName)}"))
  #if($pollDoc.isNew())
    #set($errorMessage = '')
    #set($newPoll = $pollDoc.newObject($pollClass))
    #set($discard = $pollDoc.updateObjectsFromRequest($pollClass))
    #if("${newPoll.getProperty('question').value}" == '')
      ## Actual poll question
      #set($errorMessage = $msg.get('polls.form.error.missingQuestion'))
    #elseif("${newPoll.getProperty('type').value}" == '')
      ## Poll type
      #set($errorMessage = $msg.get('polls.form.error.missingVoteType'))
    #elseif("${newPoll.getProperty('type').value}" == 'rating')
      ## Ratings levels
      #set($maxLevels = $mathtool.toInteger("${newPoll.getProperty('optionsPerVoter').value}"))
      #if("$!{maxLevels}" == '' || $maxLevels &lt;= 0 || $maxLevels &gt; $pollMaxRatingLevel)
        #set($errorMessage = $msg.get('polls.form.error.missingRatingLevel', [$pollMaxRatingLevel]))
      #end
    #else
      ## Dates validity
      #set($startDate = "$!{newPoll.getProperty('from').value}")
      #if ("${startDate}" == '')
        #set($errorMessage = $msg.get('polls.form.error.missingOpenDate', [${pollDateFormat}]))
      #else
        #set($endDate = "$!{newPoll.getProperty('to').value}")
          #if ("${endDate}" == '')
            #set($errorMessage = $msg.get('polls.form.error.missingCloseDate', [${pollDateFormat}]))
          #else
            #if(!$!{newPoll.getProperty('to').value.after($!{newPoll.getProperty('from').value})})
              #set($errorMessage = $msg.get('polls.form.error.wrongDateOrder'))
            #end
          #end
      #end
    #end
    #if("$!{errorMessage}" == '')
      ## All validity checks passed; proceed to fill everything in
      ## Title, parent, content 
      $pollDoc.setTitle($title)
      $pollDoc.setParent($pollsHome)
      $pollDoc.setContent("{{include reference=${pollSheet}/}}"))
      ## Option objects
      #set($optionPosition = 1)
      #foreach($option in $options)
        #set($optionObj = $pollDoc.newObject($pollOptionClass))
        $optionObj.set('id', $util.generateRandomString(6))
        $optionObj.set('position', ${velocityCount})
        $optionObj.set('text', ${option})
      #end
      ## Save and view
      $pollDoc.save($msg.get('polls.versionSummary.pollCreated'))
      $response.sendRedirect($pollDoc.getURL())
      #stop
    #end## no validation error
  #else## pollDoc is new, should never happen
    $response.sendRedirect($pollDoc.getURL('view', 'xpage=docalreadyexists'))
    #stop
  #end
#end
##
## Done processing the creation form
##
#end## request.xcreate
##
## Creation form:
##
{{/velocity}}

{{velocity}}
#if("$!{errorMessage}" != '')

{{error}}$errorMessage{{/error}}

#end

#set($docextras = [])
{{/velocity}}

{{include reference="Polls.PollEditSheet"/}}</content>
</xwikidoc>
